
<div id="dropdownSettings" className={settingsStatus ? "dropdownSettings2" : "dropdownSettings1"} style={{backgroundColor: darkMode ? "#3d298a" : "white"}}>
    <div id="settingsChoices" className="settingsChoices">
        <div id="volume" className="volume">
            Sounds: ON/OFF
        </div>
        <div id="textSize" className="textSize">
            Change text size
        </div>
        <div id="darkMode" className="darkMode" onClick={changeDarkMode}>{dModeHTML}</div>
        <div id="leaveSession" className="leaveSession">
            Leave Session
        </div>
    </div>
</div>

COLOR PALETTE FOR DARK MODE TRUE

header bar: #d549eb
option button/background: #c079ff
submit button: #4cdd81
increment/decrement buttons: #d7aaff
text field: #d09aff
major text: white
minor text: black
subtitle: #ededed
background: #3d298a

COLOR PALETTE FOR DARK MODE FALSE

header bar: #fdf906
option button/background: #3d298a
submit button: #4cdd81
increment/decrement buttons: #706bff
text field: #5c57e6
major text: black
minor text: white
subtitle:
background: white


        const ws = new WebSocket('ws://localhost:8080');
        ws.onopen = () => {
            console.log("websocket connected");
        }
        ws.onmessage = (e) => {
        }
        ws.onclose = () => {
            console.log('websocket disconnected')
        }



//OLD SESSION POPUP CONTAINER
    <div id="sessionPopupContainer" className={props.showPopup ? "sessionPopupContainer1" : "sessionPopupContainer2"} onClick={() => {props.switchPopup(!props.showPopup); props.switchBlur(!props.showBlur)}}>
        <div id="sessionPopup" className={props.showPopup ? "sessionPopup1" : "sessionPopup2"} style={{backgroundColor: props.darkMode? "#c079ff" : "#3d298a"}} onClick={(e) => e.stopPropagation()}>
            <div id="playerCountText" className="playerCountText">
                How many players?
            </div>
            <div id="playerCountContainer" className="playerCountContainer">
            <div id="arrow" className="arrowLeft" style={{backgroundColor: props.darkMode ? "#d7aaff" : "#706bff"}} onClick={() => decrement()}><i className="fas fa-long-arrow-alt-left"></i></div>
            <div id="playerCount" className="playerCount" style={{backgroundColor: props.darkMode ? "#d09aff" : "#5c57e6"}}>{playerCount}</div>
            <div id="arrow" className="arrowRight" style={{backgroundColor: props.darkMode ? "#d7aaff" : "#706bff"}} onClick={() => increment()}><i className="fas fa-long-arrow-alt-right"></i></div>
            </div>
            <div to="/InGame" className="confirm" style={submitStyle} onClick={() => submitCode()}>
            Submit
            </div>
        </div>
    </div> 


    //OLD API ROUTES
    api.js >>>
    const path = require("path");
    const router = require("express").Router();
    const controller = require("../controller");

    router.route("/create").post(function (req, res) {
        var data = req.body;
        controller.insertOneFN(data);
        res.send();
    })
    router.route("/fetch").post(async function (req, res){
        var data = req.body;
        controller.readDB(data, response);
        function response(result){
            res.send(result);
        }
    })
    router.route("/postUser").post(function (req, res){
        var data = req.body;
        console.log(req.body);
        controller.updateDoc(data, response);
        function response(result){
            res.send(result);
        }  
    })

    router.use(function(req, res){
        res.sendFile(path.join(__dirname, "../build/index.html"));
    });


    module.exports = router;



    server.js>>>
    app.use('/api', routes);